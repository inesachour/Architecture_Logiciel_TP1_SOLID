@startuml

interface Door{
    void lock()
    void unlock()
    void open()
    void close()
}

interface ITimeDoor extends Door{
    void lock()
    void unlock()
    void open()
    void close()
    void timeOutCallback()
}

interface ISensorDoor extends Door{
    void lock()
    void unlock()
    void open()
    void close()
    void proximityCallback()
}

class SensingDoor implements ISensorDoor{
    - boolean _locked;
    - boolean _opened;
    + SensingDoor(Sensor sensor)
    + void lock()
    + void unlock()
    + void open()
    + void close()
    + void proximityCallback()
}

class TimedDoor implements ITimeDoor{
    - {static} int TIME_OUT;
    - boolean _locked;
    - boolean _opened;
    + TimedDoor(Timer timer)
    + void lock()
    + void unlock()
    + void open()
    + void close()
    + void timeOutCallback()
}

class Sensor{
    + void register(ISensorDoor door)
    - boolean isPersonClose()
}

class Timer{
    + void register(long timeOut, final ITimeDoor door)
}

Sensor .> ISensorDoor
Timer .> ITimeDoor
TimedDoor .> Timer
SensingDoor .> Sensor

@enduml